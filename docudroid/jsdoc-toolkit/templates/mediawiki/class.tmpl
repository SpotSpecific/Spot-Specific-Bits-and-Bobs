<div class="jsdoc">{! Link.base = "../"; /* all generated links will be relative to this */ !}
{{Classlist}}
<!-- ============================== class title ============================ -->{!
					var classType = "";
					
					if (data.isBuiltin()) {
						classType += "Built-In ";
					}
					
					if (data.isNamespace) {
						if (data.is('FUNCTION')) {
							classType += "Function ";
						}
						classType += "Namespace ";
					}
					else {
						classType += "Class ";
					}
				!}
<!--SYMBOL={+classType+}{+data.alias+}
				--><!-- ============================== class summary ========================== --><p class="description"><if test="data.version"><br />Version {+ data.version +}.<br /></if><if test="data.augments.length"><br />Extends
					{+
						data.augments
						.sort()
						.map(
							function($) { return new Link().toSymbol($); }
						)
						.join(", ")
					+}.<br /></if></p>

<!-- ============================== constructor summary ==================== -->			
			<if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
			<h2>{+classType+}Summary</h2>
			<table class="summaryTable" cellspacing="0" summary="A summary of the constructor documented in the class {+data.alias+}.">
					<tr>
						<th scope="col">Constructor Attributes</th>
						<th scope="col">Constructor Name and Description</th>
					</tr>
					<tr>
						<td class="attributes">{!
							if (data.isPrivate) output += "&lt;private&gt; ";
							if (data.isInner) output += "&lt;inner&gt; ";
						!}&nbsp;</td>
						<td class="nameDescription" {!if (data.comment.getTag("hilited").length){output += 'style="color: red"'}!}>
							<div class="fixedFont">
								<b>[[#constructor|{+data.alias+}]]</b><if test="classType != 'Namespace '">{+ makeSignature(data.params) +}</if>
							</div>
							<div class="description">{+resolveLinks(summarize(data.desc))+}</div>
						</td>
					</tr>
			</table>
			</if><!-- ============================== properties summary ===================== --><if test="data.properties.length">
				{! var ownProperties = data.properties.filter(function($){return $.memberOf == data.alias && !$.isNamespace}).sort(makeSortby("name")); !}
				<if test="ownProperties.length">
				<h2>Field Summary</h2>
				<table class="summaryTable" cellspacing="0" summary="A summary of the fields documented in the class {+data.alias+}.">
						<tr>
							<th scope="col">Field Attributes</th>
							<th scope="col">Field Name and Description</th>
						</tr>
					<for each="member" in="ownProperties">
						<tr>
							<td class="attributes">{!
								if (member.isPrivate) output += "&lt;private&gt; ";
								if (member.isInner) output += "&lt;inner&gt; ";
								if (member.isStatic) output += "&lt;static&gt; ";
								if (member.isConstant) output += "&lt;constant&gt; ";
							!}&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont">
								<if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if><b>[[#{+member.name+}|{+member.name+}]]</b>
								</div>
								<div class="description">{+resolveLinks(summarize(member.desc))+}</div>
							</td>
						</tr>
					</for>
				</table>
				</if><if test="data.inheritsFrom.length">
				<div class="inheritsList">
				{!
					var borrowedMembers = data.properties.filter(function($) {return $.memberOf != data.alias});
					
					var contributers = [];
					borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
					for (var i = 0, l = contributers.length; i < l; i++) {
						output +=
							"<dt>Fields borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
							+
							"<dd>" +
							borrowedMembers
							.filter(
								function($) { return $.memberOf == contributers[i] }
							)
							.sort(makeSortby("name"))
							.map(
								function($) { return new Link().toSymbol($.alias).withText($.name) }
							)
							.join(", ")
							+
							"</dd>";
					}
				!}
				</div>
				</if>
			</if><!-- ============================== methods summary ======================== --><if test="data.methods.length">{! var ownMethods = data.methods.filter(function($){return $.memberOf == data.alias  && !$.isNamespace}).sort(makeSortby("name")); !}
				<if test="ownMethods.length">
				<h2>Methods Summary</h2>
				<table class="summaryTable" cellspacing="0" summary="A summary of the methods documented in the class {+data.alias+}.">
						<tr>
							<th scope="col">Method Attributes</th>
							<th scope="col">Method Name and Description</th>
						</tr>
					<for each="member" in="ownMethods">
						<tr>
							<td class="attributes">{!
								if (member.isPrivate) output += "&lt;private&gt; ";
								if (member.isInner) output += "&lt;inner&gt; ";
								if (member.isStatic) output += "&lt;static&gt; ";
							!}&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont"><if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if><b>[[#{+member.name+}|{+member.name+}]]</b>{+makeSignature(member.params)+}
								</div>
								<div class="description">{+resolveLinks(summarize(member.desc))+}</div>
							</td>
						</tr>
					</for>
				</table>
				</if><if test="data.inheritsFrom.length">
				<div class="inheritsList">
				{!
					var borrowedMembers = data.methods.filter(function($) {return $.memberOf != data.alias});
					var contributers = [];
					borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
					for (var i = 0, l = contributers.length; i < l; i++) {
						output +=
							"<dt>Methods borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
							+
							"<dd>" +
							borrowedMembers
							.filter(
								function($) { return $.memberOf == contributers[i] }
							)
							.sort(makeSortby("name"))
							.map(
								function($) { return new Link().toSymbol($.alias).withText($.name) }
							)
							.join(", ")
							+
							"</dd>";
					}
				
				!}
				</div>
				</if>
			</if><!-- ============================== events summary ======================== --><if test="data.events.length">{! var ownEvents = data.events.filter(function($){return $.memberOf == data.alias  && !$.isNamespace}).sort(makeSortby("name")); !}<if test="ownEvents.length"><h2>Events Summary</h2>
				<table class="summaryTable" cellspacing="0" summary="A summary of the events documented in the class {+data.alias+}.">
						<tr>
							<th scope="col">Event Attributes</th>
							<th scope="col">Event Name and Description</th>
						</tr>
					<for each="member" in="ownEvents">
						<tr>
							<td class="attributes">{!
								if (member.isPrivate) output += "&lt;private&gt; ";
								if (member.isInner) output += "&lt;inner&gt; ";
								if (member.isStatic) output += "&lt;static&gt; ";
							!}&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont"><if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if><b>{+new Link().toSymbol(member.alias).withText(member.name)+}</b>{+makeSignature(member.params)+}
								</div>
								<div class="description">{+resolveLinks(summarize(member.desc))+}</div>
							</td>
						</tr>
					</for>
				</table>
				</if><if test="data.inheritsFrom.length"><div class="inheritsList">
				{!
					var borrowedMembers = data.events.filter(function($) {return $.memberOf != data.alias});
					var contributers = [];
					borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
					for (var i = 0, l = contributers.length; i < l; i++) {
						output +=
							"<dt>Events borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
							+
							"<dd>" +
							borrowedMembers
							.filter(
								function($) { return $.memberOf == contributers[i] }
							)
							.sort(makeSortby("name"))
							.map(
								function($) { return new Link().toSymbol($.alias).withText($.name) }
							)
							.join(", ")
							+
							"</dd>";
					}
				
				!}
				</div></if></if><!-- ============================== constructor details ==================== --><if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
			<div class="details" id="constructor">
				<h2>{+classType+}Detail</h2>
				<div class="fixedFont">{!
					if (data.isPrivate) output += "&lt;private&gt; ";
					if (data.isInner) output += "&lt;inner&gt; ";
				!}
						<b>{+ data.alias +}</b><if test="classType != 'Namespace '">{+ makeSignature(data.params) +}</if></div>
				<div class="description">
					{+resolveLinks(data.desc)+}
					<if test="data.author"><br /><i>Author: </i>{+data.author+}.</if>
				</div>
				<if test="data.example.length"><for each="example" in="data.example"><pre class="code">{+example+}</pre></for></if><if test="data.params.length">
						<div class="detailList">
						<span class="heading">Parameters:</span><for each="item" in="data.params">
							<span class="item">
								{+((item.type)?""+("<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type)+"}</span> ")) : "")+} <b>{+item.name+}</b><if test="item.isOptional"><i>Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if></i></if>
							</span>
								<span class="detail">{+resolveLinks(item.desc)+}</span>
						</for>
						</div>
					</if><if test="data.deprecated">
						<div class="detailList">
						<span class="heading">Deprecated:</span>
						<span class="item">
							{+resolveLinks(data.deprecated)+}
						</span>
						</div>
					</if><if test="data.since">
						<div class="detailList">
						<span class="heading">Since:</span>
							<span class="item">{+ data.since +}</span>
						</div>
					</if><if test="data.exceptions.length">
						<div class="detailList">
						<span class="heading">Throws:</span>
						<for each="item" in="data.exceptions">
							<span class="item">
								{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
							</span>
								<span class="detail">{+resolveLinks(item.desc)+}</span>
						</for>
						</div>
					</if><if test="data.returns.length">
						<div class="detailList">
						<span class="heading">Returns:</span>
						<for each="item" in="data.returns">
								<span class="item">{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}{+resolveLinks(item.desc)+}</span>
						</for>
						</div>
					</if><if test="data.requires.length">
						<div class="detailList">
						<span class="heading">Requires:</span>
						<for each="item" in="data.requires">
							<span class="item">{+ new Link().toSymbol(item) +}</span>
						</for>
						</div>
					</if><if test="data.see.length">
						<div class="detailList">
						<span class="heading">See:</span>
						<for each="item" in="data.see">
							<span class="item">{+ new Link().toSymbol(item) +}</span>
						</for>
						</div>
					</if>
			</div>
			</if><!-- ============================== field details ========================== --><if test="defined(ownProperties) && ownProperties.length"><h2>Field Detail</h2>
				<for each="member" in="ownProperties">

					<div id="{+Link.symbolNameToLinkName(member)+}"></div>
					<div class="fixedFont">{!
						if (member.isPrivate) output += "&lt;private&gt; ";
						if (member.isInner) output += "&lt;inner&gt; ";
						if (member.isStatic) output += "&lt;static&gt; ";
						if (member.isConstant) output += "&lt;constant&gt; ";
					!}
					
					<if test="member.type"><span class="light">{{+new Link().toSymbol(member.type)+}}</span></if>
					<if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if><b>{+member.name+}</b>
					
					</div>
					<div class="description">
						{+resolveLinks(member.desc.replace(/(\r\n|\n|\r)/gm," "))+}<if test="member.author"><br /><i>Author: </i>{+member.author+}.</if></div><if test="member.example.length">
					<for each="example" in="member.example"><pre class="code">{+example+}</pre>
					</for>
					</if><if test="member.deprecated">
							<div class="detailList">
							<span class="heading">Deprecated:</span>
							<span class="item">
								{+ resolveLinks(member.deprecated) +}
							</span>
							</div>
						</if><if test="member.since">
							<div class="detailList">
							<span class="heading">Since:</span>
								<span class="item">{+ member.since +}</span>
							</div>
						</if><if test="member.see.length">
							<div class="detailList">
							<span class="heading">See:</span>
							<for each="item" in="member.see">
							<span class="item">{+ new Link().toSymbol(item) +}</span>
							</for>
							</div>
						</if><if test="member.defaultValue">
							<div class="detailList">
							<span class="heading">Default Value:</span>
							<span class="item">
								{+resolveLinks(member.defaultValue)+}
							</span>
							</div>
						</if>
				</for></if><!-- ============================== method details ========================= --><if test="defined(ownMethods) && ownMethods.length"><h2>Method Detail</h2><for each="member" in="ownMethods">
					
					<div class="methodDetail">
						<div id="{+member.name.replace(/\^\d+$/, '')+}"></div>
					<div class="fixedFont">{!
						if (member.isPrivate) output += "&lt;private&gt; ";
						if (member.isInner) output += "&lt;inner&gt; ";
						if (member.isStatic) output += "&lt;static&gt; ";
					!}<if test="member.type"><span class="light">{+member.type+}</span></if>
					<if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if><b>{+member.name.replace(/\^\d+$/, '')+}</b>{+makeSignature(member.params)+}
					
					</div>
					<div class="description">
						{+resolveLinks(member.desc.replace(/(\r\n|\n|\r)/gm," "))+}
						<if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
					</div>
					<if test="member.example.length"><for each="example" in="member.example">
					<pre class="code">{+example+}</pre>
					</for></if><if test="member.params.length">
							<div class="detailList">
							<span class="heading">Parameters:</span>
							<for each="item" in="member.params">
								<span class="item">
									{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}<b>{+item.name+}</b>
									<if test="item.isOptional"><i>Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if></i></if>
								</span>
								<span class="detail">{+resolveLinks(item.desc)+}</span>
							</for>
							</div>
						</if><if test="member.deprecated">
							<div class="detailList">
							<span class="heading">Deprecated:</span>
							<span class="item">
								{+ resolveLinks(member.deprecated) +}
							</span>
							</div>
						</if><if test="member.since">
							<div class="detailList">
							<span class="heading">Since:</span>
								<span class="item">{+ member.since +}</span>
							</div>
						</if><if test="member.exceptions.length">
							<div class="detailList">
							<span class="heading">Throws:</span>
							<for each="item" in="member.exceptions">
								<span class="item">
									{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"} " : "")+} <b>{+item.name+}</b></span>
								<span class="detail">{+resolveLinks(item.desc)+}</span>
							</for>
							</div>
						</if><if test="member.returns.length">
							<div class="detailList">
							<span class="heading">Returns:</span>
							<for each="item" in="member.returns">
								<span class="item">{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}{+resolveLinks(item.desc)+}</span>
							</for>
							</div>
						</if><if test="member.requires.length">
							<div class="detailList">
							<span class="heading">Requires:</span>
							<for each="item" in="member.requires">
								<span class="item">{+ resolveLinks(item) +}</span>
							</for>
							</div>
						</if><if test="member.see.length">
							<div class="detailList">
							<span class="heading">See:</span>
							<for each="item" in="member.see">
								<span class="item">{+ new Link().toSymbol(item) +}</span>
							</for>
							</div>
						</if>
					</div>
				</for>
			</if><!-- ============================== event details ========================= --><if test="defined(ownEvents) && ownEvents.length">
				<h2>Event Detail</h2>
				<for each="member" in="ownEvents">
					<a name="{+Link.symbolNameToLinkName(member)+}"> </a>
					<div class="fixedFont">{!
						if (member.isPrivate) output += "&lt;private&gt; ";
						if (member.isInner) output += "&lt;inner&gt; ";
						if (member.isStatic) output += "&lt;static&gt; ";
					!}
					
					<if test="member.type"><span class="light">{{+new Link().toSymbol(member.type)+}}</span></if>
					<if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if><b>{+member.name+}</b>{+makeSignature(member.params)+}
					
					</div>
					<div class="description">
						{+resolveLinks(member.desc)+}
<if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
					</div>
					
					<if test="member.example.length">
					<for each="example" in="member.example">
					<pre class="code">{+example+}</pre>
					</for>
					</if>				
						<if test="member.params.length">
							<div class="detailList">
							<span class="heading">Parameters:</span>
							<for each="item" in="member.params">
								<span class="item">
									{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}<b>{+item.name+}</b>
									<if test="item.isOptional"><i>Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if></i></if>
								</span>
								<span class="detail">{+ resolveLinks(item.desc) +}</span>
							</for>
							</div>
						</if>
						<if test="member.deprecated">
							<div class="detailList">
							<span class="heading">Deprecated:</span>
							<span class="item">
								{+ resolveLinks(member.deprecated) +}
							</span>
							</div>
						</if>
						<if test="member.since">
							<div class="detailList">
							<span class="heading">Since:</span>
								<span class="item">{+ member.since +}</span>
							</div>
							</div>
						</if>
						<if test="member.exceptions.length">
							<div class="detailList">
							<span class="heading">Throws:</span>
							<for each="item" in="member.exceptions">
								<span class="item">
									{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
								</span>
								<span class="detail">{+ resolveLinks(item.desc) +}</span>
							</for>
							</div>
						</if>
						<if test="member.returns.length">
							<div class="detailList">
							<span class="heading">Returns:</span>
							<for each="item" in="member.returns">
								<span class="item">{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}{+resolveLinks(item.desc)+}</span>
							</for>
							</div>
						</if>
						<if test="member.requires.length">
							<div class="detailList">
							<span class="heading">Requires:</span>
							<for each="item" in="member.requires">
								<span class="item">{+ resolveLinks(item) +}</span>
							</for>
							</div>
						</if>
						<if test="member.see.length">
							<div class="detailList">
							<span class="heading">See:</span>
							<for each="item" in="member.see">
								<span class="item">{+ new Link().toSymbol(item) +}</span>
							</for>
							</div>
						</if>
				</for>
			</if>
</div>